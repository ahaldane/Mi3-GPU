[build-system]
requires = ["setuptools", "wheel", "setuptools-git-versioning", "oldest-supported-numpy"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["mi3gpu*"]

[tool.setuptools-git-versioning]
enabled = true

[project]
name = "mi3gpu"
authors = [{name = "Allan Haldane", email = "allan.haldane@temple.edu"}]
description = "Monte Carlo Inverse Ising Inference on GPUs"
readme = "README.md"
requires-python = ">=3.7"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: GPLv3",
    "Operating System :: OS Independent",
    "numpy >= 1.14",
    "scipy>=1.0.0",
    "pyopencl",
    "configargparse",
]
dependencies = [
    "numpy >= 1.14",
    "scipy >= 1.0.0",
    "pyopencl",
    "configargparse",
]
dynamic =["version" ]

[project.scripts]
Mi3 = "mi3gpu.Mi3:main"
getMarginals = "mi3gpu.utils.getMarginals:main"
pseudocount = "mi3gpu.utils.pseudocount:main"
phyloWeights = "mi3gpu.utils.phyloWeights:main"
subsample_MSA = "mi3gpu.utils.subsample_MSA:main"
getSeqEnergies = "mi3gpu.utils.getSeqEnergies:main"
changeGauge = "mi3gpu.utils.changeGauge:main"
getXij = "mi3gpu.utils.getXij:main"
ijscores = "mi3gpu.utils.ijscores:main"
exploreParam = "mi3gpu.utils.exploreParam:main"
alphamet_reduction = "mi3gpu.utils.alphabet_reduction:main"
apply_alphamap = "mi3gpu.utils.apply_alphamap:main"
reverse_alphamap = "mi3gpu.utils.reverse_alphamap:main"
pre_regularize = "mi3gpu.utils.pre_regularize:main"
